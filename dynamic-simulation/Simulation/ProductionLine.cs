using System;using System.Collections.Generic;using System.Threading;class ProductionLine{    private object bufferLock = new object();    private Queue<Detail> buffer = new Queue<Detail>();    private bool isRunning = true;    private int totalProcessedCount = 0;    private int deferredCount = 0;    public int GetProcessedCount()    {        return totalProcessedCount;    }    public int GetDeferredCount()    {        return deferredCount;    }    public double GetAverageProcessingTime()    {        lock (bufferLock)        {            if (totalProcessedCount == 0)            {                return 0;            }            else            {                double totalProcessingTime = 0;                foreach (var detail in buffer)                {                    totalProcessingTime += (DateTime.Now - detail.StartTime).TotalMilliseconds;                }                return totalProcessingTime / totalProcessedCount;            }        }    }    public void Stop()    {        isRunning = false;        lock (bufferLock)        {            Monitor.PulseAll(bufferLock);        }    }    public void RunProducer()    {        while (totalProcessedCount - 1 < 20)        {            Detail detail = new Detail(totalProcessedCount + 1, DateTime.Now);            lock (bufferLock)            {                buffer.Enqueue(detail);                Monitor.Pulse(bufferLock);            }            totalProcessedCount++;            Console.WriteLine($"Произведена деталь #{detail.Id}");            Thread.Sleep(500);        }    }    public void RunFirstWorker()    {        while (isRunning)        {            Detail detail = null;            lock (bufferLock)            {                while (buffer.Count == 0)                {                    Monitor.Wait(bufferLock);                }                detail = buffer.Dequeue();            }            int processingTime = new Random().Next(1000, 4000);            Thread.Sleep(processingTime);            lock (bufferLock)            {                if (processingTime > 2000)                {                    deferredCount++;                    Console.WriteLine($"Деталь #{detail.Id} отложена");                }            }        }    }    public void RunSecondWorker()    {        while (isRunning)        {            Detail detail = null;            lock (bufferLock)            {                while (buffer.Count == 0)                {                    Monitor.Wait(bufferLock);                }                detail = buffer.Dequeue();            }            int processingTime = new Random().Next(1000, 4000);            Thread.Sleep(processingTime);            lock (bufferLock)            {                if (processingTime > 2000)                {                    deferredCount++;                    Console.WriteLine($"Деталь #{detail.Id} отложена");                }            }        }    }}class Detail{    public int Id { get; }    public DateTime StartTime { get; }    public Detail(int id, DateTime startTime)    {        Id = id;        StartTime = startTime;    }}