using System;using System.Collections.Generic;using System.Threading;class ProductionLine{    private object bufferLock = new object();    private object secondBufferLock = new object();    private List<Detail> buffer = new List<Detail>();    private List<Detail> secondBuffer = new List<Detail>();    private Random random = new Random();    private int totalDetails = 0;    private int processedDetails = 0;    private class Detail    {        public int Id { get; set; }    }    public void Start()    {        Thread workerThread1 = new Thread(WorkerThread);        Thread workerThread2 = new Thread(WorkerThread);        workerThread1.Start();        workerThread2.Start();    }    private void WorkerThread()    {        while (true)        {            Thread.Sleep(random.Next(500, 2000));            Detail detail = null;            lock (bufferLock)            {                if (buffer.Count > 0)                {                    detail = buffer[0];                    buffer.RemoveAt(0);                }            }            if (detail != null)            {                lock (secondBufferLock)                {                    if (!secondBuffer.Contains(detail))                    {                        secondBuffer.Add(detail);                        // Используем монопольный доступ к консоли                        lock (typeof(Console))                        {                            Console.WriteLine("Деталь #" + detail.Id + " обрабатывается на втором рабочем месте");                        }                    }                }                Interlocked.Increment(ref processedDetails);            }        }    }    public void LoadBuffer()    {        for (int i = 1; i <= 10; i++)        {            Detail detail = new Detail { Id = i };            lock (bufferLock)            {                buffer.Add(detail);            }            // Используем монопольный доступ к консоли            lock (typeof(Console))            {                Console.WriteLine("Произведена деталь #" + detail.Id);            }            Thread.Sleep(1000);            Interlocked.Increment(ref totalDetails);        }    }    public void PrintStatistics()    {        lock (typeof(Console))        {            Console.WriteLine("Статистика:");            double loadedPercentage = ((double)buffer.Count / (buffer.Count + processedDetails)) * 100;            Console.WriteLine("Загружено рабочих мест: " + loadedPercentage.ToString("F2") + "%");            Console.WriteLine("Обработано деталей: " + processedDetails);            Console.WriteLine("Общее количество деталей: " + totalDetails);            double probability = ((double)secondBuffer.Count / processedDetails) * 100;            probability = Math.Min(100, probability); // Ограничение значения до 100%            Console.WriteLine("Вероятность попадания в отложенные: " + probability.ToString("F2") + "%");        }    }}class Detail{    public int Id { get; set; }    public Detail(int id)    {        Id = id;    }}